/**
 * üöÄ SERVIDOR BACKEND - API REST
 * 
 * Este arquivo implementa um servidor Express simples que:
 * 1. Gerencia a associa√ß√£o entre emails e endere√ßos de carteira ERC-4337
 * 2. Usa um banco de dados NeDB (file-based) para persist√™ncia
 * 3. Fornece API REST para o frontend React
 * 
 * ENDPOINTS:
 * POST /return-account - Cria ou retorna uma conta baseada no email
 * 
 * TECNOLOGIAS:
 * - Express.js: Framework web para Node.js
 * - NeDB: Banco de dados embarcado (similar ao MongoDB)
 * - CORS: Permite requisi√ß√µes cross-origin do frontend
 * - TypeScript: Tipagem est√°tica para JavaScript
 */

import express from "express";
import bodyParser from "body-parser";
import cors from "cors";
import Datastore from "nedb";

// üîß CONFIGURA√á√ÉO DO SERVIDOR EXPRESS
const app = express();

// Middleware para parsear JSON nas requisi√ß√µes
app.use(bodyParser.json());

// Middleware para permitir requisi√ß√µes cross-origin (frontend em porta diferente)
app.use(cors());

// üíæ CONFIGURA√á√ÉO DO BANCO DE DADOS

/**
 * Inicializa√ß√£o do banco NeDB
 * 
 * NeDB √© um banco de dados embarcado que:
 * - Funciona como MongoDB mas sem servidor separado
 * - Armazena dados em um arquivo local (accounts.db)
 * - √â adequado para desenvolvimento e pequenos projetos
 * 
 * ‚ö†Ô∏è PRODU√á√ÉO: Substitua por PostgreSQL, MongoDB ou similar
 */
const accountsDB = new Datastore({ 
  filename: "./accounts.db",  // Arquivo onde os dados s√£o salvos
  autoload: true              // Carrega automaticamente na inicializa√ß√£o
});

console.log("üíæ Banco de dados NeDB inicializado (arquivo: accounts.db)");

// üõ†Ô∏è API ENDPOINTS

/**
 * üì° ENDPOINT PRINCIPAL: POST /return-account
 * 
 * Este endpoint √© respons√°vel por:
 * 1. Receber email + endere√ßo de carteira do frontend
 * 2. Verificar se j√° existe uma conta para o email
 * 3. Se n√£o existe, criar nova conta no banco
 * 4. Retornar os dados da conta (nova ou existente)
 * 
 * BODY DA REQUISI√á√ÉO:
 * {
 *   "email": "usuario@gmail.com",
 *   "address": "0x742d35Cc6cd..."
 * }
 * 
 * RESPOSTA:
 * {
 *   "_id": "abc123",
 *   "email": "usuario@gmail.com", 
 *   "address": "0x742d35Cc6cd..."
 * }
 */
app.post("/return-account", async (req, res) => {
  console.log("\nüì° Nova requisi√ß√£o recebida em /return-account");
  
  // Extrai email e endere√ßo do corpo da requisi√ß√£o
  const { email, address } = req.body;
  console.log(`üìß Email: ${email}`);
  console.log(`üè† Endere√ßo: ${address}`);
  
  // Verifica se o email j√° existe no banco de dados
  if (!(await emailExists(email))) {
    console.log(`‚ú® ${email} n√£o existe no banco. Criando nova conta...`);
    await createAccount(email, address);
  } else {
    console.log(`‚úÖ ${email} j√° existe no banco. Retornando conta existente...`);
  }

  // Busca e retorna os dados da conta (nova ou existente)
  try {
    let account = await getAccountByEmail(email);
    console.log("üì§ Enviando dados da conta:", account);
    res.send(account);
  } catch (error) {
    console.error("‚ùå Erro ao buscar conta:", error);
    res.status(500).send(error);
  }
});

// üöÄ INICIALIZA√á√ÉO DO SERVIDOR

/**
 * Configura√ß√£o da porta do servidor
 * - Usa vari√°vel de ambiente PORT se dispon√≠vel
 * - Caso contr√°rio, usa porta 3001 como padr√£o
 */
const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
  console.log(`\nüöÄ Servidor rodando na porta ${PORT}`);
  console.log(`üåê Frontend deve fazer requisi√ß√µes para: http://localhost:${PORT}`);
  console.log(`üìä Banco de dados: ./accounts.db`);
  console.log("‚úÖ Servidor pronto para receber requisi√ß√µes!\n");
});

// üîß FUN√á√ïES UTILIT√ÅRIAS DO BANCO DE DADOS

/**
 * üîç VERIFICA SE EMAIL EXISTE
 * 
 * Fun√ß√£o ass√≠ncrona que verifica se um email j√° est√° cadastrado no banco.
 * 
 * @param email - Email a ser verificado
 * @returns Promise<boolean> - true se existe, false se n√£o existe
 * 
 * FUNCIONAMENTO:
 * 1. Executa uma query findOne no banco NeDB
 * 2. Se encontrar um documento, retorna true
 * 3. Se n√£o encontrar (null), retorna false
 */
async function emailExists(email: string): Promise<boolean> {
  return new Promise((resolve, reject) => {
    console.log(`üîç Verificando se ${email} existe no banco...`);
    
    accountsDB.findOne({ email }, (err: any, account: any) => {
      if (err) {
        console.error("‚ùå Erro ao verificar email:", err);
        reject(err);
        return;
      }
      
      const exists = account !== null;
      console.log(`${exists ? '‚úÖ' : '‚ùå'} Email ${email} ${exists ? 'encontrado' : 'n√£o encontrado'}`);
      resolve(exists);
    });
  });
}

/**
 * ‚ú® CRIAR NOVA CONTA
 * 
 * Fun√ß√£o ass√≠ncrona que cria uma nova conta no banco de dados.
 * 
 * @param email - Email do usu√°rio
 * @param address - Endere√ßo da carteira ERC-4337
 * @returns Promise<any> - Dados da conta criada
 * 
 * FUNCIONAMENTO:
 * 1. Insere um novo documento no banco NeDB
 * 2. NeDB automaticamente adiciona um _id √∫nico
 * 3. Retorna os dados da conta criada
 */
async function createAccount(email: string, address: string): Promise<any> {
  return new Promise((resolve, reject) => {
    console.log(`‚ú® Criando nova conta para ${email}...`);
    
    // Dados da nova conta
    const newAccountData = { 
      email: email, 
      address: address,
      createdAt: new Date().toISOString() // Adiciona timestamp para refer√™ncia
    };
    
    accountsDB.insert(newAccountData, (err, newAccount) => {
      if (err) {
        console.error("‚ùå Erro ao criar conta:", err);
        reject(err);
        return;
      }
      
      console.log("‚úÖ Conta criada com sucesso:", newAccount);
      resolve(newAccount);
    });
  });
}

/**
 * üîé BUSCAR CONTA POR EMAIL
 * 
 * Fun√ß√£o ass√≠ncrona que busca uma conta espec√≠fica pelo email.
 * 
 * @param email - Email da conta a ser buscada
 * @returns Promise<any> - Dados da conta encontrada
 * 
 * FUNCIONAMENTO:
 * 1. Executa uma query findOne no banco NeDB
 * 2. Retorna os dados completos da conta (incluindo _id)
 * 3. Em caso de erro, rejeita a Promise
 */
async function getAccountByEmail(email: string): Promise<any> {
  return new Promise((resolve, reject) => {
    console.log(`üîé Buscando conta para ${email}...`);
    
    accountsDB.findOne({ email }, (err, account) => {
      if (err) {
        console.error("‚ùå Erro ao buscar conta:", err);
        reject(err);
        return;
      }
      
      if (account) {
        console.log("‚úÖ Conta encontrada:", account);
      } else {
        console.log("‚ùå Nenhuma conta encontrada para este email");
      }
      
      resolve(account);
    });
  });
}

// üí° INFORMA√á√ïES ADICIONAIS PARA DESENVOLVIMENTO

/**
 * üìä ESTRUTURA DO BANCO DE DADOS
 * 
 * Cada documento no banco tem a seguinte estrutura:
 * {
 *   "_id": "string-gerada-automaticamente",
 *   "email": "usuario@gmail.com",
 *   "address": "0x742d35Cc6cd...",
 *   "createdAt": "2024-01-01T12:00:00.000Z"
 * }
 * 
 * üîß MELHORIAS PARA PRODU√á√ÉO:
 * 
 * 1. Valida√ß√£o de dados:
 *    - Validar formato do email
 *    - Validar formato do endere√ßo Ethereum
 *    - Sanitizar inputs
 * 
 * 2. Seguran√ßa:
 *    - Autentica√ß√£o JWT
 *    - Rate limiting
 *    - HTTPS obrigat√≥rio
 *    - Valida√ß√£o de origem das requisi√ß√µes
 * 
 * 3. Banco de dados robusto:
 *    - PostgreSQL ou MongoDB
 *    - √çndices para performance
 *    - Backup autom√°tico
 *    - Pool de conex√µes
 * 
 * 4. Logging e monitoramento:
 *    - Winston para logs estruturados
 *    - M√©tricas de performance
 *    - Alertas de erro
 * 
 * 5. Tratamento de erros:
 *    - Middleware de erro global
 *    - C√≥digos de status HTTP apropriados
 *    - Mensagens de erro padronizadas
 */
