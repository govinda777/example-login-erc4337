/**
 * üîß M√ìDULO DE ACCOUNT ABSTRACTION ERC-4337
 * 
 * Este arquivo cont√©m a l√≥gica para criar e configurar uma Smart Wallet
 * usando o padr√£o ERC-4337 (Account Abstraction).
 * 
 * PRINCIPAIS FUNCIONES:
 * 1. Criar uma inst√¢ncia de SimpleAccountAPI
 * 2. Configurar os contratos necess√°rios (EntryPoint, Factory)
 * 3. Calcular endere√ßos de carteiras determin√≠sticos
 * 4. Corrigir bugs do SDK original (getUserOpReceipt)
 * 
 * DEPEND√äNCIAS:
 * - @account-abstraction/sdk: SDK oficial para ERC-4337
 * - ethers: Biblioteca para interagir com Ethereum
 */

import { SimpleAccountAPI } from "@account-abstraction/sdk";
import { ethers } from "ethers";
import { JsonRpcProvider } from "@ethersproject/providers";

/**
 * üè≠ FUN√á√ÉO PRINCIPAL: getSimpleAccount
 * 
 * Esta fun√ß√£o √© o ponto de entrada para criar uma Smart Wallet ERC-4337.
 * Ela configura todos os componentes necess√°rios e retorna uma inst√¢ncia
 * pronta para calcular endere√ßos e enviar transa√ß√µes.
 * 
 * PAR√ÇMETROS:
 * @param provider - Conex√£o com a blockchain (Polygon Mumbai)
 * @param signingKey - Chave privada que controla a smart wallet
 * @param entryPointAddress - Endere√ßo do contrato EntryPoint na rede
 * @param factoryAddress - Endere√ßo do contrato SimpleAccountFactory
 * 
 * RETORNO:
 * @returns SimpleAccountAPI configurada e pronta para uso
 * 
 * PROCESSO:
 * 1. Cria uma carteira Ethers.js com a chave privada
 * 2. Inicializa a SimpleAccountAPI com os contratos
 * 3. Aplica corre√ß√£o para bug do getUserOpReceipt
 * 4. Retorna a inst√¢ncia configurada
 */
export function getSimpleAccount(
  provider: JsonRpcProvider,
  signingKey: string,
  entryPointAddress: string,
  factoryAddress: string
) {
  console.log("üè≠ Inicializando SimpleAccount com par√¢metros:");
  console.log(`üîë Chave de assinatura: ${signingKey.substring(0, 10)}...`);
  console.log(`üö™ EntryPoint: ${entryPointAddress}`);
  console.log(`üèóÔ∏è Factory: ${factoryAddress}`);

  // üë§ CRIAR OWNER (DONO DA CARTEIRA)
  
  /**
   * Cria uma inst√¢ncia de carteira Ethers.js que ser√° o "owner" da smart wallet.
   * Esta carteira √© quem assina as UserOperations, mas N√ÉO √© a carteira que
   * os usu√°rios veem (isso √© a smart wallet).
   * 
   * IMPORTANTE: Esta chave privada controla a smart wallet!
   */
  const owner = new ethers.Wallet(signingKey, provider);
  console.log(`üë§ Owner criado: ${owner.address}`);

  // üöÄ CRIAR SMART WALLET API
  
  /**
   * Inicializa a SimpleAccountAPI com todos os componentes necess√°rios.
   * Esta API permite:
   * - Calcular o endere√ßo da smart wallet (getCounterFactualAddress)
   * - Criar UserOperations para transa√ß√µes
   * - Enviar transa√ß√µes via bundler
   * - Verificar status de transa√ß√µes
   */
  const sw = new SimpleAccountAPI({
    provider,                // Conex√£o com blockchain
    entryPointAddress,       // Contrato que processa UserOperations
    owner,                   // Carteira que assina as opera√ß√µes
    factoryAddress,          // Contrato que cria novas smart wallets
  });

  console.log("‚úÖ SimpleAccountAPI inicializada com sucesso!");

  // üîß CORRE√á√ÉO DE BUG (HACK NECESS√ÅRIO)
  
  /**
   * PROBLEMA IDENTIFICADO:
   * A implementa√ß√£o padr√£o do getUserOpReceipt no SDK oficial tem um bug
   * onde n√£o especifica o par√¢metro fromBlock nas queries de eventos.
   * Isso causa erros em alguns provedores RPC que requerem este par√¢metro.
   * 
   * SOLU√á√ÉO:
   * Sobrescrevemos a fun√ß√£o para incluir fromBlock nas queries de eventos.
   * Isso garante compatibilidade com mais provedores RPC.
   */
  sw.getUserOpReceipt = async (
    userOpHash: string,
    timeout = 30000,    // 30 segundos de timeout
    interval = 5000     // Verificar a cada 5 segundos
  ): Promise<string | null> => {
    console.log(`üîç Buscando recibo para UserOp: ${userOpHash}`);

    // üìú ABI DO EVENTO UserOperationEvent
    
    /**
     * Definimos o ABI apenas para o evento que precisamos escutar.
     * O UserOperationEvent √© emitido quando uma UserOperation √© processada.
     */
    const abi = [
      "event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed)",
    ];

    // Cria uma inst√¢ncia do contrato EntryPoint para escutar eventos
    const ep = new ethers.Contract(sw.entryPointAddress, abi, sw.provider);

    // üîç BUSCA COM TIMEOUT E RETRY
    
    /**
     * Obtemos o bloco mais recente para definir uma janela de busca.
     * Vamos procurar eventos nos √∫ltimos 100 blocos ou desde o bloco 100,
     * o que for maior.
     */
    const block = await sw.provider.getBlock("latest");
    const endtime = Date.now() + timeout;
    
    console.log(`‚è∞ Buscando eventos at√©: ${new Date(endtime).toISOString()}`);
    console.log(`üì¶ Bloco atual: ${block.number}`);

    // Loop de retry at√© encontrar o evento ou timeout
    while (Date.now() < endtime) {
      try {
        /**
         * CORRE√á√ÉO DO BUG:
         * Especificamos fromBlock explicitamente para evitar erro RPC.
         * Buscamos nos √∫ltimos 100 blocos ou desde o bloco 100.
         */
        const fromBlock = Math.max(100, block.number - 100);
        
        console.log(`üîé Buscando eventos de ${fromBlock} at√© ${block.number}`);
        
        const events = await ep.queryFilter(
          ep.filters.UserOperationEvent(userOpHash), // Filtro por hash espec√≠fico
          fromBlock                                   // CORRE√á√ÉO: incluir fromBlock
        );

        if (events.length > 0) {
          const event = events[0];
          console.log(`‚úÖ Evento encontrado! TxHash: ${event.transactionHash}`);
          console.log(`üìä Detalhes do evento:`, {
            sender: event.args?.sender,
            success: event.args?.success,
            actualGasCost: event.args?.actualGasCost?.toString(),
            actualGasUsed: event.args?.actualGasUsed?.toString()
          });
          
          return event.transactionHash;
        }

        console.log(`‚è≥ Nenhum evento encontrado, tentando novamente em ${interval/1000}s...`);
        
        // Aguarda o intervalo antes da pr√≥xima tentativa
        await new Promise((resolve) => setTimeout(resolve, interval));
        
      } catch (error) {
        console.error("‚ùå Erro ao buscar eventos:", error);
        // Continua tentando mesmo com erro
        await new Promise((resolve) => setTimeout(resolve, interval));
      }
    }

    console.log("‚åõ Timeout: UserOperation n√£o foi processada no tempo esperado");
    return null;
  };

  console.log("üîß Fun√ß√£o getUserOpReceipt corrigida aplicada");

  // üì§ RETORNA API CONFIGURADA
  
  /**
   * Retorna a inst√¢ncia de SimpleAccountAPI totalmente configurada e pronta para:
   * 
   * PRINCIPAIS M√âTODOS DISPON√çVEIS:
   * - getCounterFactualAddress(): Calcula endere√ßo da smart wallet
   * - createSignedUserOp(): Cria UserOperation assinada
   * - getUserOpReceipt(): Busca recibo de UserOperation (vers√£o corrigida)
   * - getAccountAddress(): Endere√ßo da smart wallet (ap√≥s deploy)
   * 
   * EXEMPLO DE USO:
   * ```typescript
   * const accountAPI = getSimpleAccount(...);
   * const address = await accountAPI.getCounterFactualAddress();
   * console.log("Endere√ßo da smart wallet:", address);
   * ```
   */
  return sw;
}

export default getSimpleAccount;

/**
 * üí° NOTAS T√âCNICAS IMPORTANTES
 * 
 * 1. **Endere√ßo Determin√≠stico**:
 *    O endere√ßo da smart wallet √© calculado de forma determin√≠stica
 *    baseado na chave privada do owner e no contrato factory.
 *    Isso significa que a mesma chave sempre gera o mesmo endere√ßo.
 * 
 * 2. **Deploy Sob Demanda**:
 *    A smart wallet s√≥ √© realmente deployada na blockchain quando
 *    a primeira transa√ß√£o √© enviada. Antes disso, √© apenas um endere√ßo calculado.
 * 
 * 3. **Gas Abstraction**:
 *    Com ERC-4337, √© poss√≠vel que outra entidade (Paymaster) pague
 *    o gas em nome do usu√°rio, usando tokens ERC-20 ou at√© mesmo
 *    de forma gratuita.
 * 
 * 4. **Batch Transactions**:
 *    Uma UserOperation pode conter m√∫ltiplas chamadas de fun√ß√£o,
 *    permitindo opera√ß√µes complexas em uma √∫nica transa√ß√£o.
 * 
 * 5. **Upgradabilidade**:
 *    Smart wallets podem ser projetadas para serem upgrad√°veis,
 *    permitindo adicionar funcionalidades no futuro.
 * 
 * üìö RECURSOS PARA APRENDER MAIS:
 * - EIP-4337: https://eips.ethereum.org/EIPS/eip-4337
 * - Account Abstraction SDK: https://github.com/eth-infinitism/account-abstraction
 * - Stackup Docs: https://docs.stackup.sh/
 */